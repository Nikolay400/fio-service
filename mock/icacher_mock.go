// Code generated by MockGen. DO NOT EDIT.
// Source: iface/icacher.go

// Package mock_iface is a generated GoMock package.
package mock_iface

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockIcacher is a mock of Icacher interface.
type MockIcacher struct {
	ctrl     *gomock.Controller
	recorder *MockIcacherMockRecorder
}

// MockIcacherMockRecorder is the mock recorder for MockIcacher.
type MockIcacherMockRecorder struct {
	mock *MockIcacher
}

// NewMockIcacher creates a new mock instance.
func NewMockIcacher(ctrl *gomock.Controller) *MockIcacher {
	mock := &MockIcacher{ctrl: ctrl}
	mock.recorder = &MockIcacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIcacher) EXPECT() *MockIcacherMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockIcacher) Del(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockIcacherMockRecorder) Del(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockIcacher)(nil).Del), key)
}

// Get mocks base method.
func (m *MockIcacher) Get(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIcacherMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIcacher)(nil).Get), key)
}

// Set mocks base method.
func (m *MockIcacher) Set(key string, value interface{}, t time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockIcacherMockRecorder) Set(key, value, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockIcacher)(nil).Set), key, value, t)
}
