package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.37

import (
	"context"
	"errors"
	"fio-service/graph/convert"
	m "fio-service/graph/model"
	"fio-service/model"
	"strconv"
)

// CreatePerson is the resolver for the createPerson field.
func (r *mutationResolver) CreatePerson(ctx context.Context, input m.GqlNewPerson) (int, error) {
	r.logger.Info("GraphQL: CreatePerson(GqlNewPerson: " + r.logger.Json(input) + ")")
	person := convert.ConvertGqlToModel(&input)
	err := person.Validate()
	if err != nil {
		return 0, err
	}
	return r.Ps.AddPerson(person)
}

// UpdatePerson is the resolver for the updatePerson field.
func (r *mutationResolver) UpdatePerson(ctx context.Context, input model.UpdatePerson) (*model.Person, error) {
	r.logger.Info("GraphQL: UpdatePerson(UpdatePerson: " + r.logger.Json(input) + ")")
	if input.Id < 0 {
		return nil, errors.New("Error: ID must be positive")
	}
	err := input.Validate()
	if err != nil {
		return nil, err
	}
	return r.Ps.UpdatePerson(&input)
}

// DeletePerson is the resolver for the deletePerson field.
func (r *mutationResolver) DeletePerson(ctx context.Context, input int) (*model.Person, error) {
	r.logger.Info("GraphQL: DeletePerson(id: " + strconv.Itoa(input) + ")")
	if input < 0 {
		return nil, errors.New("Error: ID must be positive")
	}
	return r.Ps.DeletePersonById(input)
}

// People is the resolver for the People field.
func (r *queryResolver) People(ctx context.Context, ageFrom int, ageTo int, gender string, country string, search string, pageNum int, onPage int) ([]*model.Person, error) {
	filters := &model.Filters{ageFrom, ageTo, gender, country, search, pageNum, onPage}
	r.logger.Info("GraphQL: People(filters: " + r.logger.Json(filters) + ")")
	err := filters.Validate()
	if err != nil {
		return nil, err
	}
	return r.Ps.GetPeopleByFilters(filters)
}

// Person is the resolver for the Person field.
func (r *queryResolver) Person(ctx context.Context, id int) (*model.Person, error) {
	r.logger.Info("GraphQL: Person(id: " + strconv.Itoa(id) + ")")
	if id < 0 {
		return nil, errors.New("Error: ID must be positive")
	}
	return r.Ps.GetPersonById(id)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
